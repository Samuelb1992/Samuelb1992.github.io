barplot(na.count[na.count > 0],
las = 2,
cex.names = 0.4)
# Calculo na por columna
na.count <- apply(air.stgo,2, function(x) sum(is.na(x)))
# Orden de variables de mayor a menor NA
na.count <- na.count[order(na.count , decreasing = TRUE)]
# Plot de columnas que tienen valores faltantes
barplot(na.count[na.count > 0],
las = 2,
col = "skyblue"
cex.names = 0.4)
# Calculo na por columna
na.count <- apply(air.stgo,2, function(x) sum(is.na(x)))
# Orden de variables de mayor a menor NA
na.count <- na.count[order(na.count , decreasing = TRUE)]
# Increase margin size
par(mar=c(11,4,4,4))
# Plot de columnas que tienen valores faltantes
barplot(na.count[na.count > 0],
las = 2,
col = "skyblue")
par(mar=c(11,4,4,4))
# Plot de columnas que tienen valores faltantes
barplot(na.count[na.count > 0],
las = 2,
col = "skyblue")
# Calculo na por columna
na.count <- apply(air.stgo,2, function(x) sum(is.na(x)))
# Orden de variables de mayor a menor NA
na.count <- na.count[order(na.count , decreasing = TRUE)]
# Increase margin size
par(mar=c(8,4,4,4))
# Plot de columnas que tienen valores faltantes
barplot(na.count[na.count > 0],
las = 2,
col = "skyblue")
# Calculo na por columna
na.count <- apply(air.stgo,2, function(x) sum(is.na(x)))
# Orden de variables de mayor a menor NA
na.count <- na.count[order(na.count , decreasing = TRUE)]
# Increase margin size
par(mar=c(8,4,4,4))
# Plot de columnas que tienen valores faltantes
barplot(na.count[na.count > 0],
las = 2,
col = "skyblue",
cex.names = 0.6)
# Calculo na por columna
na.count <- apply(air.stgo,2, function(x) sum(is.na(x)))
# Orden de variables de mayor a menor NA
na.count <- na.count[order(na.count , decreasing = TRUE)]
# Increase margin size
par(mar=c(10,4,4,4))
# Plot de columnas que tienen valores faltantes
barplot(na.count[na.count > 0],
las = 2,
col = "skyblue",
cex.names = 0.6)
# Calculo % NA por columna
na.count <- apply(air.stgo,2, function(x) sum(is.na(x))/nrow(air.stgo))
# Calculo % NA por columna
na.count <- apply(air.stgo,2, function(x) 100*sum(is.na(x))/nrow(air.stgo))
# Orden de variables de mayor a menor NA
na.count <- na.count[order(na.count , decreasing = TRUE)]
# Increase margin size
par(mar=c(11,4,4,4))
# Plot de columnas que tienen valores faltantes
barplot(na.count[na.count > 0],
las = 2,
col = "skyblue",
cex.names = 0.7,
main = "Variables con Valores Faltantes")
?barplot
head(na.count,5)
head(na.count,10)
air.stgo$neighbourhood_group_cleansed
na.count
na.count[6]
na.count[1:6]
na.count[1:5]
rownames(na.count[1:5])
names(na.count[1:5])
air.stgo[,names(na.count[1:5])]
air.stgo[,!names(na.count[1:5])]
air.stgo[,!=names(na.count[1:5])]
names(na.count[1:5])
# Quitamos variables con > 90% de faltantes
var.na <- names(na.count[1:5])
air.stgo %>%
select(var.na)
air.stgo %>%
select(all_of(var.na))
air.stgo %>%
select(!all_of(var.na))
dim(air.stgo)
names(air.stgo)
var.drop <- c("id","listing_url","scrape_id","last_scraped","source","picture_url","host_id","host_url","host_about","host_thumbnail_url","host_picture_url","host_neighbourhood")
na.count["id"]
na.count["id",]
dim(air.stgo[,var.drop])
length(var.drop)
dim(air.stgo)
75-12-5
air.stgo %>%
select(!all_of(var.na)) %>%
select(!all_of(var.drop))
var.drop <- c("id","listing_url","scrape_id","last_scraped","source","picture_url","host_id","host_url","host_about","host_thumbnail_url","host_picture_url","host_neighbourhood")
air.stgo %>%
select(!all_of(var.na)) %>%
select(!all_of(var.drop))
var.na
var.drop
air.stgo %>%
select(!all_of(c(var.na,var.drop)))
names(air.stgo)
# Quitamos variables con > 90% de faltantes
var.na <- names(na.count[1:5])
var.drop <- c("id","listing_url","scrape_id","last_scraped","source","picture_url","host_id","host_url","host_about","host_thumbnail_url","host_picture_url","host_neighbourhood")
air.stgo %>%
select(!all_of(c(var.na,var.drop)))
var.na
# Quitamos variables con > 90% de faltantes
var.na <- names(na.count[1:5])
var.drop <- c("id","listing_url","scrape_id","last_scraped","source","picture_url","host_id","host_url","host_about","host_thumbnail_url","host_picture_url")
air.stgo %>%
select(!all_of(c(var.na,var.drop)))
# variables con > 90% de faltantes
var.na <- names(na.count[1:5])
# id - links
var.drop <- c("id","listing_url","scrape_id","last_scraped","source","picture_url","host_id","host_url","host_about","host_thumbnail_url","host_picture_url")
# Quitandolas del dataset
air.stgo <-
air.stgo %>%
select(!all_of(c(var.na,var.drop)))
# Seleccionar variables de tipo numerico
var.pca <- do.call(rbind, lapply(air.stgo, class))%>%
as.data.frame() %>%
filter(V1 %in% c("numeric", "integer")) %>%
rownames()
#| warning: false
pca.air <- PCA(scale(air.stgo[,var.pca],
center = TRUE,
scale = TRUE) ,
graph = FALSE ,
scale.unit = FALSE)
fviz_eig(pca.air , addlabels = TRUE)
summary(pca.air)
#| out-width: 100%
fviz_pca_var(pca.air, geom = c("point" , "text") , labelsize = 2)+
ggtitle("Loading Plot")+
theme(plot.title = element_text(hjust = 0.5))
test.box <- air.stgo[,var.pca]
?stack
test.box
test.box[1:2,]
stack(test.box[1:2,])
stack(test.box[1:2,]`1`)
test.box <- air.stgo[,var.pca]
ggplot(stack(test.box+1), aes(x = ind, y = values,fill=ind)) +
geom_boxplot() +
coord_trans(y = "log10")+
theme(legend.position="none") +
scale_fill_viridis_d(option="C") +
theme(axis.text.x = element_text(angle = 90, hjust = 1, vjust = 0.5),
axis.title = element_blank(),
plot.title = element_text(hjust = 0.5))+
ggtitle("Distribución variables numéricas")
test.box
stack(test.box+1)
na.omit(stack(test.box+1))
test.box <- air.stgo[,var.pca]
ggplot(na.omit(stack(test.box+1)), aes(x = ind, y = values,fill=ind)) +
geom_boxplot() +
coord_trans(y = "log10")+
theme(legend.position="none") +
scale_fill_viridis_d(option="C") +
theme(axis.text.x = element_text(angle = 90, hjust = 1, vjust = 0.5),
axis.title = element_blank(),
plot.title = element_text(hjust = 0.5))+
ggtitle("Distribución variables numéricas")
na.omit(stack(test.box+1))
test.box <- na.omit(stack(air.stgo[,var.pca]+1))
test.box <- na.omit(stack(air.stgo[,var.pca]+1))
ggplot(test.box, aes(x = ind, y = values,fill=ind)) +
geom_boxplot() +
coord_trans(y = "log10")+
theme(legend.position="none") +
scale_fill_viridis_d(option="C") +
theme(axis.text.x = element_text(angle = 90, hjust = 1, vjust = 0.5),
axis.title = element_blank(),
plot.title = element_text(hjust = 0.5))+
ggtitle("Distribución variables numéricas")
test.box <- na.omit(stack(air.stgo[,var.pca]+1))
ggplot(test.box, aes(x = ind, y = values,fill=ind))+
geom_boxplot()+
coord_trans(y = "log10")+
theme(legend.position="none") +
scale_fill_viridis_d(option="C") +
theme(axis.text.x = element_text(angle = 90, hjust = 1, vjust = 0.5),
axis.title = element_blank(),
plot.title = element_text(hjust = 0.5))+
ggtitle("Distribución variables numéricas")
sum(is.na(test.box))
summary(test.box)
test.box <- na.omit(stack(air.stgo[,var.pca])+1)
ggplot(test.box, aes(x = ind, y = values,fill=ind))+
geom_boxplot()+
coord_trans(y = "log10")+
theme(legend.position="none") +
scale_fill_viridis_d(option="C") +
theme(axis.text.x = element_text(angle = 90, hjust = 1, vjust = 0.5),
axis.title = element_blank(),
plot.title = element_text(hjust = 0.5))+
ggtitle("Distribución variables numéricas")
test.box <- na.omit(stack(air.stgo[,var.pca])+1)
ggplot(test.box[1:3,], aes(x = ind, y = values,fill=ind))+
geom_boxplot()+
coord_trans(y = "log10")+
theme(legend.position="none") +
scale_fill_viridis_d(option="C") +
theme(axis.text.x = element_text(angle = 90, hjust = 1, vjust = 0.5),
axis.title = element_blank(),
plot.title = element_text(hjust = 0.5))+
ggtitle("Distribución variables numéricas")
test.box <- na.omit(stack(air.stgo[,var.pca])+1)
ggplot(test.box[,1:3], aes(x = ind, y = values,fill=ind))+
geom_boxplot()+
coord_trans(y = "log10")+
theme(legend.position="none") +
scale_fill_viridis_d(option="C") +
theme(axis.text.x = element_text(angle = 90, hjust = 1, vjust = 0.5),
axis.title = element_blank(),
plot.title = element_text(hjust = 0.5))+
ggtitle("Distribución variables numéricas")
test.box[,1:3]
test.box
test.box <- na.omit(stack(air.stgo[,var.pca])+1)
test.box
(air.stgo[,var.pca]
air.stgo[,var.pca]
air.stgo[,var.pca]
stack(air.stgo[,var.pca])
test.box <- na.omit(stack(air.stgo[,var.pca]))+1
ggplot(test.box[,], aes(x = ind, y = values,fill=ind))+
geom_boxplot()+
coord_trans(y = "log10")+
theme(legend.position="none") +
scale_fill_viridis_d(option="C") +
theme(axis.text.x = element_text(angle = 90, hjust = 1, vjust = 0.5),
axis.title = element_blank(),
plot.title = element_text(hjust = 0.5))+
ggtitle("Distribución variables numéricas")
test.box
air.stgo[,var.pca]
summary(air.stgo[,var.pca])
# variables con > 90% de faltantes
var.na <- names(na.count[1:5])
# variables id - links
var.drop <- c("id","listing_url","scrape_id","last_scraped","source","picture_url","host_id","host_url","host_about","host_thumbnail_url","host_picture_url","latitude","longitude")
# Quitandolas del dataset
air.stgo <-
air.stgo %>%
select(!all_of(c(var.na,var.drop)))
#| warning: false
#| echo: false
library(clickR)
library(lubridate)
library(tidyverse)
library(readxl)
library(stringr)
library(knitr)
library(kableExtra)
library(FactoMineR)
library(ropls)
library(factoextra)
#| echo: false
air.stgo <- read.csv("listings-3.csv",na.strings = c("N/A",""), header = TRUE)
#| echo: false
select.variables <-  c(
'name',
'bedrooms',
'beds',
'amenities',
'price',
'number_of_reviews',
'first_review',
'last_review',
'review_scores_rating',
'reviews_per_month')
desc.variables <-  c(
'Nombre',
'Número de habitaciones',
'Cantidad total de camas',
'Servicios adicionales como Wifi, Calefacción, Gym, etc.',
'Precio por noche',
'Número de reseñas recibidas',
'Fecha de la primera reseña recibida',
'Fecha de la última reseña recibida',
'Puntaje general del alojamiento',
'Cantidad de reseñas por mes que recibe el alojamiento')
table.dic <- data.frame("Variable" = select.variables , "Descripción" = desc.variables)
table.dic %>%
kbl() %>%
kable_styling(bootstrap_options = c("striped","hover","condensed"), full_width = F , font_size = 12)
#| echo: false
class.sapply <- do.call(rbind,lapply(air.stgo,class)) %>% as.data.frame() %>% rename(type_class = V1)
list.class <- class.sapply %>% split(.$type_class)
#| echo: false
list.class %>%
kbl(col.names = NULL) %>%
kable_styling(bootstrap_options = c("striped","hover","condensed"), full_width = F , font_size = 12)%>%
scroll_box(height = "200px")
#| echo: false
t(sapply(list.class,dim)[1,]) %>%
kbl() %>%
kable_styling(bootstrap_options = c("striped","hover","condensed"), full_width = F , font_size = 12)
#| warning: false
# to date
air.stgo$host_since <- ymd(air.stgo$host_since)
# remove % string and numeric
air.stgo$host_response_rate <- str_remove(air.stgo$host_response_rate,"%") %>% as.numeric()
# remove % string and numeric
air.stgo$host_acceptance_rate <- str_remove(air.stgo$host_acceptance_rate,"%") %>% as.numeric()
# to numeric
air.stgo$host_is_superhost <- ifelse(air.stgo$host_is_superhost == "t",1,0)
# to numeric
air.stgo$host_has_profile_pic <- ifelse(air.stgo$host_has_profile_pic == "t",1,0)
# Remove all text and get number
air.stgo$bathrooms_text <- as.numeric(gsub("([0-9]+).*$", "\\1", air.stgo$bathrooms_text))
# remove currency and format to numeric
air.stgo$price <- gsub(",","",gsub("\\$","",air.stgo$price)) %>% as.numeric()
# to numeric
air.stgo$has_availability <- ifelse(air.stgo$has_availability == "t",1,0)
# to numeric
air.stgo$instant_bookable <- ifelse(air.stgo$instant_bookable == "t",1,0)
# to date
air.stgo$first_review <- ymd(air.stgo$first_review)
air.stgo$last_review <- ymd(air.stgo$last_review)
# Calculo % NA por columna
na.count <- apply(air.stgo,2, function(x) 100*sum(is.na(x))/nrow(air.stgo))
# Orden de variables de mayor a menor NA
na.count <- na.count[order(na.count , decreasing = TRUE)]
# Increase margin size
par(mar=c(11,4,4,4))
# Plot de columnas que tienen valores faltantes
barplot(na.count[na.count > 0],
las = 2,
col = "skyblue",
cex.names = 0.7,
main = "Porcentaje de Valores Faltantes")
# variables con > 90% de faltantes
var.na <- names(na.count[1:5])
# variables id - links
var.drop <- c("id","listing_url","scrape_id","last_scraped","source","picture_url","host_id","host_url","host_about","host_thumbnail_url","host_picture_url","latitude","longitude")
# Quitandolas del dataset
air.stgo <-
air.stgo %>%
select(!all_of(c(var.na,var.drop)))
test.box <- na.omit(stack(air.stgo[,var.pca]+1))
test.box <- na.omit(stack(air.stgo[,var.pca]+1))
air.stgo[,var.pca]+1
#| warning: false
#| echo: false
library(clickR)
library(lubridate)
library(tidyverse)
library(readxl)
library(stringr)
library(knitr)
library(kableExtra)
library(FactoMineR)
library(ropls)
library(factoextra)
#| echo: false
air.stgo <- read.csv("listings-3.csv",na.strings = c("N/A",""), header = TRUE)
#| echo: false
select.variables <-  c(
'name',
'bedrooms',
'beds',
'amenities',
'price',
'number_of_reviews',
'first_review',
'last_review',
'review_scores_rating',
'reviews_per_month')
desc.variables <-  c(
'Nombre',
'Número de habitaciones',
'Cantidad total de camas',
'Servicios adicionales como Wifi, Calefacción, Gym, etc.',
'Precio por noche',
'Número de reseñas recibidas',
'Fecha de la primera reseña recibida',
'Fecha de la última reseña recibida',
'Puntaje general del alojamiento',
'Cantidad de reseñas por mes que recibe el alojamiento')
table.dic <- data.frame("Variable" = select.variables , "Descripción" = desc.variables)
table.dic %>%
kbl() %>%
kable_styling(bootstrap_options = c("striped","hover","condensed"), full_width = F , font_size = 12)
#| echo: false
class.sapply <- do.call(rbind,lapply(air.stgo,class)) %>% as.data.frame() %>% rename(type_class = V1)
list.class <- class.sapply %>% split(.$type_class)
#| echo: false
list.class %>%
kbl(col.names = NULL) %>%
kable_styling(bootstrap_options = c("striped","hover","condensed"), full_width = F , font_size = 12)%>%
scroll_box(height = "200px")
#| echo: false
t(sapply(list.class,dim)[1,]) %>%
kbl() %>%
kable_styling(bootstrap_options = c("striped","hover","condensed"), full_width = F , font_size = 12)
#| warning: false
# to date
air.stgo$host_since <- ymd(air.stgo$host_since)
# remove % string and numeric
air.stgo$host_response_rate <- str_remove(air.stgo$host_response_rate,"%") %>% as.numeric()
# remove % string and numeric
air.stgo$host_acceptance_rate <- str_remove(air.stgo$host_acceptance_rate,"%") %>% as.numeric()
# to numeric
air.stgo$host_is_superhost <- ifelse(air.stgo$host_is_superhost == "t",1,0)
# to numeric
air.stgo$host_has_profile_pic <- ifelse(air.stgo$host_has_profile_pic == "t",1,0)
# Remove all text and get number
air.stgo$bathrooms_text <- as.numeric(gsub("([0-9]+).*$", "\\1", air.stgo$bathrooms_text))
# remove currency and format to numeric
air.stgo$price <- gsub(",","",gsub("\\$","",air.stgo$price)) %>% as.numeric()
# to numeric
air.stgo$has_availability <- ifelse(air.stgo$has_availability == "t",1,0)
# to numeric
air.stgo$instant_bookable <- ifelse(air.stgo$instant_bookable == "t",1,0)
# to date
air.stgo$first_review <- ymd(air.stgo$first_review)
air.stgo$last_review <- ymd(air.stgo$last_review)
# Calculo % NA por columna
na.count <- apply(air.stgo,2, function(x) 100*sum(is.na(x))/nrow(air.stgo))
# Orden de variables de mayor a menor NA
na.count <- na.count[order(na.count , decreasing = TRUE)]
# Increase margin size
par(mar=c(11,4,4,4))
# Plot de columnas que tienen valores faltantes
barplot(na.count[na.count > 0],
las = 2,
col = "skyblue",
cex.names = 0.7,
main = "Porcentaje de Valores Faltantes")
# variables con > 90% de faltantes
var.na <- names(na.count[1:5])
# variables id - links
var.drop <- c("id","listing_url","scrape_id","last_scraped","source","picture_url","host_id","host_url","host_about","host_thumbnail_url","host_picture_url","latitude","longitude")
# Quitandolas del dataset
air.stgo <-
air.stgo %>%
select(!all_of(c(var.na,var.drop)))
# Seleccionar variables de tipo numerico
var.pca <- do.call(rbind, lapply(air.stgo, class))%>%
as.data.frame() %>%
filter(V1 %in% c("numeric", "integer")) %>%
rownames()
#| warning: false
pca.air <- PCA(scale(air.stgo[,var.pca],
center = TRUE,
scale = TRUE) ,
graph = FALSE ,
scale.unit = FALSE)
fviz_eig(pca.air , addlabels = TRUE)
#| out-width: 100%
fviz_pca_var(pca.air, geom = c("point" , "text") , labelsize = 2)+
ggtitle("Loading Plot")+
theme(plot.title = element_text(hjust = 0.5))
#| echo: false
pca.air$var$coord %>%
as.data.frame() %>%
select(Dim.1,Dim.2) %>%
arrange(desc(Dim.1)) %>%
head(7) %>%
kbl(digits = 3) %>%
kable_styling(bootstrap_options = c("striped","hover","condensed"), full_width = F , font_size = 12)
#| echo: false
# coordenadas
pca.coord <-
pca.air$var$coord %>%
as.data.frame()
# variables review
review.var <- pca.air$var$coord %>%
as.data.frame() %>%
select(Dim.1, Dim.2) %>%
arrange(desc(Dim.1)) %>%
head(7) %>% row.names
# variables dispoiniblidad
avai.var <- pca.air$var$coord %>%
as.data.frame() %>%
select(Dim.1, Dim.2) %>%
arrange(Dim.1) %>% head(4) %>%
row.names
# variables
pca.coord$Dim.1 = round(pca.coord$Dim.1,3)
pca.coord$Dim.2 = round(pca.coord$Dim.2,3)
# color
pca.coord$Dim.1 = cell_spec(pca.coord$Dim.1, color = ifelse(pca.coord$Dim.1 > 0, "green", "red"))
pca.coord$Dim.2 = cell_spec(pca.coord$Dim.2, color = ifelse(pca.coord$Dim.2 > 0, "green", "red"))
# print
pca.coord[c(review.var,avai.var[-3]),] %>%
select(Dim.1,Dim.2) %>%
kbl(escape = F) %>%
kable_styling(bootstrap_options = c("striped","hover","condensed"), full_width = F , font_size = 12)
pca.air$ind
dim(air.stgo[,var.pca])
dim(air.stgo[,var.pca])[2]
