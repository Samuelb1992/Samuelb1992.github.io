library(stringr)
knitr::opts_chunk$set(echo = FALSE)
base_dir <- "/Users/samuelbeltranlastra/Documents/Proyecto R Git/Portafolio" # i.e. where the jekyll blog is on the hard drive.
base_url <- "/" # keep as is
# If the document is currently being knit, do this; skip it in normal execution
if (!is.null(knitr::current_input())){
# Output path for figures
fig_path <- paste0("assets/images/", str_remove(knitr::current_input(), ".Rmd"), "/")
# Set base directories
knitr::opts_knit$set(base.dir = base_dir, base.url = base_url)
# Set figure directories
knitr::opts_chunk$set(fig.path = fig_path,
cache.path = '../cache/',
message=FALSE, warning=FALSE,
cache = FALSE)
}
library(readxl)
library(forecast)
library(tidyverse)
library(forecast)
library(vars)
library(Metrics)
library(lmtest)
#Lectura de los datos
df = read.csv("Turismo_España.csv",sep=";",quote="\"",)
# Utilizamos solo columna  total
df = df[,c("Total")]
# Transformamamos dataset en serie temporal , en este caso tenemmos datos desde Enero del 2001
ts_df = ts(df[1:length(df)],start = c(2001,1) , frequency = 12)
plot(ts_df, main= "Nª Viajeros en España desde En-2001 a Nov-2021" , ylab = "Nº Viajeros" , xlab =  "Año")
# Filtramos serie temporal Enero 2001 a Diciembre 2019
ts_df2 = window(ts_df,start = c(2001,1), end = c(2019,12))
plot(ts_df2, main="Nª Viajeros en España desde En-2001 a Dic-2019")
descomp_ts = stl(ts_df2, s.window = "periodic")
plot(descomp_ts , main = "Descomposición de la serie temporal")
plot(descomp_ts$time.series[,2] , main= "Tendencia" , ylab= "")
plot(descomp_ts$time.series[,3] , main= "Residuos" , ylab= "")
plot(log(ts_df2) ,  main= "Log de la Serie")
plot(descomp_ts$time.series[,1] , main= "Estacionalidad" , ylab= "")
plot(ts_df2, main='Nº Viajeros en España', xlab='Tiempo', ylab='Viajeros')
lines(rollmean(ts_df2, 4), col="red", lwd=1)
lines(rollmean(ts_df2, 3), col="green", lwd=1)
lines(rollmean(ts_df2, 10), col="blue", lwd=1)
legend("topleft", legend= c("Original", "Media móvil n=3" ,"Media móvil n=4","Media móvil n=10"),
lwd=c(1,2,2), col=c("black","green", "red","blue") , cex = 0.5)
grid()
ses.viajeros<-HoltWinters(ts_df2, seasonal= c("multiplicative"), beta=FALSE,gamma=FALSE)
plot(ses.viajeros , main="Modelo Exponencial Simple")
sholt.viajeros<-HoltWinters(ts_df2, seasonal="mult", gamma=FALSE)
plot(sholt.viajeros, main="Modelo Holt")
# holt winters libreria base R
M1=HoltWinters(ts_df2,seasonal="mult",optim.start = c(alpha = 0.349, beta = 0.0012, gamma = 0.1635),optim.control = list())
plot(M1)
M2 <- hw(ts_df2,h=23,seasonal="multiplicative", initial = "optimal")
plot(M2)
rmse_mm = rmse(ts_df2,rollmean(ts_df2,3))
rmse_mm
rmse_ses = rmse(ts_df2,ses.viajeros$fitted[,1])
#RMSE del exp. simple
rmse_ses
rmse_holt = rmse(ts_df2,sholt.viajeros$fitted[,1])
rmse_holt
rmse_holt_winters = forecast::accuracy(M2)[,2]
rmse_holt_winters
auto_ts= auto.arima(log(ts_df2))
auto_ts
coeftest(auto_ts)
arima1 =arima(log(ts_df2), order = c(3,0,0), seasonal = list(order=c(2,1,1), period= 12))
arima1
coeftest(arima1)
arima2 =arima(log(ts_df2), order = c(3,0,0), seasonal = list(order=c(0,1,1), period= 12))
arima2
coeftest(arima2)
plot(arima2$residuals,main='Residuos del modelo ARIMA (3,0,0)(0,1,1)')
mean(arima2$residuals)
plot(arima2$residuals,main='Varianza-Residuos del modelo ARIMA (3,0,0)(0,1,1)')
par(mfrow=c(1,2))
acf(ts(arima2$residuals), lag.max=48,main="ACF Residuos",ylim=c(-1,1))
pacf(ts(arima2$residuals), lag.max=48,main="PACF Residuos",ylim=c(-1,1))
tsdiag(arima2,gof.lag=24)
layout(matrix(c(1,1,2,2),2,2, byrow=TRUE))
hist(arima2$residuals, br=12, main='Histograma Residuos' ,xlab= "Residuos")
qqnorm(arima2$residuals, main='QQNorm')
qqline(arima2$residuals)
cpgram(arima2$residuals,main="Periodograma acum. residuos")
#ARIMA (3,0,0)(2,1,0)12
arima8 = arima(log(ts_df2), order = c(3,0,0), seasonal = list(order=c(2,1,0), period= 12))
#ARIMA (3,0,0)(2,1,2)12
arima3 =arima(log(ts_df2), order = c(3,0,0), seasonal = list(order=c(2,1,2), period= 12))
#ARIMA (3,0,0)(1,1,0)12
arima4 =arima(log(ts_df2), order = c(3,0,0), seasonal = list(order=c(1,1,0), period= 12))
#ARIMA (2,0,0)(2,1,0)12
arima5 =arima(log(ts_df2), order = c(2,0,0), seasonal = list(order=c(2,1,0), period= 12))
#ARIMA (2,0,1)(2,1,0)12
arima6 =arima(log(ts_df2), order = c(2,0,1), seasonal = list(order=c(2,1,0), period= 12))
#ARIMA (1,0,2)(2,1,0)12
arima7 =arima(log(ts_df2), order = c(1,0,2), seasonal = list(order=c(2,1,0), period= 12))
rmse(ts_df2,exp(fitted(arima2)))
rmse(ts_df2,exp(fitted(arima8)))
rmse(ts_df2,exp(fitted(arima3)))
rmse(ts_df2,exp(fitted(arima4)))
rmse(ts_df2,exp(fitted(arima5)))
rmse(ts_df2,exp(fitted(arima6)))
rmse(ts_df2,exp(fitted(arima7)))
rmse_mm
rmse_ses
rmse_holt
rmse_holt_winters
#predicciones
rmse_log = rmse(log(ts_df2),fitted(arima2))
# deshaciendo logaritmo
rmse_real = rmse(ts_df2,exp(fitted(arima2)))
#Predicciones calculadas para un año
Predicciones = predict(arima2, n.ahead = 23)
# Revertir transformación logarítmica
pred_final = exp(Predicciones$pred)
# tabla
tabla_pred = data.frame("Mes"=c("Enero","Febrero","Marzo","Abril","Mayo","Junio","Julio","Agosto","Septiembre","Octubre","Noviembre","Diciembre"),"Predicción"= pred_final[1:12])
knitr::kable(tabla_pred)
plot(ts_df,main=" Enero 2001 a Noviembre 2021",ylab= "Viajeros")
lines(pred_final,col="steelblue",lwd=3,lty = 2)
lines(M2$mean,col="red",lwd=1.0)
legend("topleft", legend= c("Original", "Predic. ARIMA" ,"Predic. Holt Winters"),
lwd=c(1,1,1), col=c("black","steelblue", "red") ,lty = c(1,2,1), cex = 0.8)
# tabla comparativa
tabla_comparativa = data.frame("Mes"=format(seq(as.Date("2020/1/1"), by = "month", length.out = 23),"%Y-%m"),"Real"=ts_df[229:251],"Pred. Arima"= ts(pred_final),"Pred. HW"= ts(M2$mean ))
knitr::kable(tabla_comparativa)
deficit =abs(round((tabla_comparativa$Real-tabla_comparativa$Pred..Arima)/(tabla_comparativa$Pred..Arima),4)*100)
plot(deficit, main= "Déficit Porcentual estimado de Viajeros en España generado por el Covid",ylab= "% Déficit",xlab="",xaxt = "n",cex.main=0.8)
axis(1, at=1:23 ,labels = format(seq(as.Date("2020/1/1"), by = "month", length.out = 23),"%Y-%m"),las=2)
library(stringr)
knitr::opts_chunk$set(echo = FALSE)
base_dir <- "/Users/samuelbeltranlastra/Documents/Proyecto R Git/Portafolio" # i.e. where the jekyll blog is on the hard drive.
base_url <- "/" # keep as is
# If the document is currently being knit, do this; skip it in normal execution
if (!is.null(knitr::current_input())){
# Output path for figures
fig_path <- paste0("assets/images/", str_remove(knitr::current_input(), ".Rmd"), "/")
# Set base directories
knitr::opts_knit$set(base.dir = base_dir, base.url = base_url)
# Set figure directories
knitr::opts_chunk$set(fig.path = fig_path,
cache.path = '../cache/',
message=FALSE, warning=FALSE,
cache = FALSE)
}
library(readxl)
library(forecast)
library(tidyverse)
library(forecast)
library(vars)
library(Metrics)
library(lmtest)
#Lectura de los datos
df = read.csv("Turismo_España.csv",sep=";",quote="\"",)
getwd()
